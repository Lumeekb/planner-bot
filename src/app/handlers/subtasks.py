# src/app/handlers/subtasks.py
import datetime as dt
import logging
from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy import select

from ..db import AsyncSessionLocal
from ..models import MIT
from ..services.users import get_or_create_user
from ..services.subtasks import (
    add_sub_for_today_index,
    list_subs_for_today,
    toggle_sub_done,
    delete_sub,
)

router = Router()
log = logging.getLogger(__name__)


def _usage_sub() -> str:
    return (
        "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É:\n"
        "/sub <MIT#> <—Ç–µ–∫—Å—Ç>\n"
        "–ù–∞–ø—Ä.: /sub 1 –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç"
    )

def _usage_done() -> str:
    return (
        "–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:\n"
        "/subdone <MIT#> <‚Ññ_–ø–æ–¥–∑–∞–¥–∞—á–∏>\n"
        "–ù–∞–ø—Ä.: /subdone 1 2"
    )

def _usage_del() -> str:
    return (
        "–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É:\n"
        "/subdel <MIT#> <‚Ññ_–ø–æ–¥–∑–∞–¥–∞—á–∏>\n"
        "–ù–∞–ø—Ä.: /subdel 2 1"
    )


@router.message(Command("sub"))
async def sub_add(m: types.Message):
    """ /sub <MIT#> <—Ç–µ–∫—Å—Ç> """
    text = (m.text or "").strip()
    parts = text.split(maxsplit=2)  # ['/sub', '1', '—Ç–µ–∫—Å—Ç...']
    if len(parts) < 3:
        await m.answer(_usage_sub())
        return

    mit_token = parts[1]
    if mit_token not in ("1", "2", "3"):
        await m.answer("–ù–æ–º–µ—Ä MIT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3.\n" + _usage_sub())
        return

    title = parts[2].strip()
    if not title:
        await m.answer("–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ–¥–∑–∞–¥–∞—á–∏.\n" + _usage_sub())
        return

    ok = await add_sub_for_today_index(m.from_user.id, int(mit_token), title)
    await m.answer("‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞." if ok else "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ MIT –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω—ã: /mit")


@router.message(Command("subs"))
async def subs_list(m: types.Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò MIT.
    –ù—É–º–µ—Ä–∞—Ü–∏—é 1‚Äì3 –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è (id –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é),
    —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è MIT.index.
    """
    await m.answer("üÜï SUBS v4")

    try:
        user = await get_or_create_user(m.from_user.id)
        today = dt.date.today()

        # 1) –ë–µ—Ä—ë–º MIT –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        async with AsyncSessionLocal() as s:
            result = await s.execute(
                select(MIT).where(MIT.user_id == user.id, MIT.for_date == today)
            )
            mits_all = result.scalars().all()

        if not mits_all:
            await m.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è MIT –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –î–æ–±–∞–≤—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:\n/mit –ó–∞–¥–∞—á–∞1 | –ó–∞–¥–∞—á–∞2 | –ó–∞–¥–∞—á–∞3")
            return

        # 2) –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        try:
            mits_all.sort(key=lambda mi: getattr(mi, "id"))
        except Exception:
            pass

        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∫–∞–∫ MIT #1..#3 –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        mit_titles: dict[int, str] = {}
        for i, mi in enumerate(mits_all[:3], start=1):
            title = getattr(mi, "title", None) or f"MIT #{i}"
            mit_titles[i] = title

        # 3) –ü–æ–¥–∑–∞–¥–∞—á–∏ dict: {1: [Sub], 2: [...], 3: [...]}
        data = await list_subs_for_today(m.from_user.id) or {}

        # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ 1‚Üí2‚Üí3
        lines: list[str] = []
        for i in (1, 2, 3):
            parent_title = mit_titles.get(i, f"MIT #{i}")
            lines.append(f"MIT #{i} ‚Äî {parent_title}")
            items = data.get(i, [])
            if not items:
                lines.append("  ‚Äî –ø–æ–¥–∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç")
            else:
                for j, s in enumerate(items, start=1):
                    if isinstance(s, dict):
                        done = s.get("done", False)
                        title = s.get("title", "")
                    else:
                        done = getattr(s, "done", False)
                        title = getattr(s, "title", "")
                    mark = "‚úÖ" if done else "‚¨úÔ∏è"
                    lines.append(f"  {j}. {mark} {title}")
            lines.append("")

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏
        lines.append(_usage_sub())
        lines.append(_usage_done())
        lines.append(_usage_del())

        await m.answer("\n".join(lines))

    except Exception as e:
        log.exception("subs_list failed")
        await m.answer(f"‚ö†Ô∏è subs error: {type(e).__name__}: {e}")


@router.message(Command("subdone"))
async def sub_done(m: types.Message):
    """ /subdone <MIT#> <‚Ññ_–ø–æ–¥–∑–∞–¥–∞—á–∏> """
    parts = (m.text or "").split()
    if len(parts) != 3:
        await m.answer(_usage_done())
        return

    mit_token, sub_token = parts[1], parts[2]
    if mit_token not in ("1", "2", "3"):
        await m.answer("–ù–æ–º–µ—Ä MIT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3.\n" + _usage_done())
        return

    try:
        mit_idx = int(mit_token)
        sub_idx = int(sub_token)
    except ValueError:
        await m.answer("–ù–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.\n" + _usage_done())
        return

    ok = await toggle_sub_done(m.from_user.id, mit_idx, sub_idx)
    await m.answer("‚úÖ –ì–æ—Ç–æ–≤–æ." if ok else "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä–∞: /subs")


@router.message(Command("subdel"))
async def sub_del(m: types.Message):
    """ /subdel <MIT#> <‚Ññ_–ø–æ–¥–∑–∞–¥–∞—á–∏> """
    parts = (m.text or "").split()
    if len(parts) != 3:
        await m.answer(_usage_del())
        return

    mit_token, sub_token = parts[1], parts[2]
    if mit_token not in ("1", "2", "3"):
        await m.answer("–ù–æ–º–µ—Ä MIT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3.\n" + _usage_del())
        return

    try:
        mit_idx = int(mit_token)
        sub_idx = int(sub_token)
    except ValueError:
        await m.answer("–ù–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.\n" + _usage_del())
        return

    ok = await delete_sub(m.from_user.id, mit_idx, sub_idx)
    await m.answer("üóë –£–¥–∞–ª–µ–Ω–æ." if ok else "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä–∞: /subs")

